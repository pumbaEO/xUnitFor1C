
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ЗаполнитьВидыДокументов();
КонецПроцедуры

&НаСервере
Функция _ЭтотОбъект()
	Возврат РеквизитФормыВЗначение("Объект");
КонецФункции


&НаСервере
Процедура ЗаполнитьВидыДокументов()
	Объект.ВидыДокументов.Очистить();
	
	ВсеДокументы = Метаданные.Документы;
	Для каждого МетаДокумент Из ВсеДокументы Цикл
		Объект.ВидыДокументов.Добавить(МетаДокумент.Имя);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПодключитьБазуПоОЛЕ()
	ИмяКласса = "V83.COMConnector";//_ИмяКлассаКоннектора;//;
	//ИмяКласса = "V82.Application";
	//ИмяКласса = "V83.Application";
	
	ВнешняяБаза = Новый COMОбъект(ИмяКласса);  //v82.COMConnector //Application
	Если Найти(ИмяКласса , "Application") Тогда
		ВнешняяБаза.Visible = Истина;
	КонецЕсли;
	//СтрокаСоединенияОЛЕ = "srvr=srv-ant-04:2541;Ref=BUANTCFK;usr=Мартыненков_Е_В;pwd=1234567";	
	РезультатСоединения = ВнешняяБаза.Connect(Объект.СтрокаПодключения);
	
	Если Найти(ИмяКласса, "Connector") <> 0 Тогда
		Возврат РезультатСоединения;
	Иначе
		Если НЕ РезультатСоединения Тогда
			Сообщить("Не удалось подключиться к базе: "+ОписаниеОшибки());
			Возврат Неопределено;
		КонецЕсли;
		
		Возврат ВнешняяБаза;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции 


&НаКлиенте
Процедура СравнитьДвижения(Команда)
	ОтметитьСуществующиеВПериодеНаСервере();
	Ошибки = СравнитьДвиженияНаСервере();
	
	Если Ошибки.Количество() = 0 Тогда
		ПоказатьПредупреждение(, "Все прощло без ошибок!");
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Найдено "+Ошибки.Количество()+" ошибок!");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция СравнитьДвиженияНаСервере()
	
	ВнешняяБаза = ПодключитьБазуПоОЛЕ();
	Если ВнешняяБаза = Неопределено Тогда Возврат Ложь;	КонецЕсли;
	
	//Начало транзакции
	НачатьТранзакцию();
	ВнешняяБаза.НачатьТранзакцию();
	
	тзДокументов = ТаблицаДокументовДляСравнения();
	Объект.ДокументыДляПроведения.Загрузить(тзДокументов);
	тзДокументовВНЕШНЯЯ = ТаблицаДокументовДляСравнения(ВнешняяБаза);
	
	тзДокументов.Колонки.Добавить("ВнешнийДокумент");
	тзДокументовВНЕШНЯЯ.Колонки.Добавить("ВнешнийДокумент");
	
	Ошибки = Новый Массив;
	Если не СравнитьТаблицыЗначений(тзДокументов, тзДокументовВНЕШНЯЯ, Ошибки) Тогда		
		
		Если Объект.ПрерыватьПриПервойОшибке Тогда
			ОткатитьВсе(ВнешняяБаза, Ошибки);
			Возврат Ошибки;
		КонецЕсли;
		
	КонецЕсли;
	
	//Проверка состава таблиц документов
	ЕстьОшибкаНаличияДокументов = ПроверитьНаличиеДокументов(тзДокументов, тзДокументовВНЕШНЯЯ, Ошибки, ВнешняяБаза);
	ЕстьОшибкаНаличияДокументов = ЕстьОшибкаНаличияДокументов и ПроверитьНаличиеДокументов(тзДокументовВНЕШНЯЯ, тзДокументов, Ошибки);
	Если ЕстьОшибкаНаличияДокументов и Объект.ПрерыватьПриПервойОшибке Тогда
		ОткатитьВсе(ВнешняяБаза, Ошибки);
		Возврат Ошибки;
	КонецЕсли;
	
	//Отмена проведение и поочередное проведение
	Попытка
		ОтменитьПроведенияДокументов(тзДокументов);
		ПровестиПоочередно(тзДокументов, тзДокументовВНЕШНЯЯ);
	Исключение
		ОткатитьВсе(ВнешняяБаза, Ошибки);
		Ашипка = ОписаниеОшибки();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Ашипка);
		ВызватьИсключение Ашипка;
	КонецПопытки;
	
			
	ОткатитьВсе(ВнешняяБаза, Ошибки);
	
	Возврат Ошибки;
КонецФункции

&НаСервере
Функция ПроверитьНаличиеДокументов(Таблица1, Таблица2, Ошибки = Неопределено, ВнешняяБаза = Неопределено)
	Ошибки = ?(Ошибки = Неопределено, Новый Массив, Ошибки);
	
	ЕстьОшибки = Ложь;
	
	Для каждого Строка1 Из Таблица1 Цикл
		Если ВнешняяБаза = Неопределено Тогда
			Отбор = Новый Структура("Номер,Дата");
		Иначе
			Отбор = ВнешняяБаза.NewObject("Структура");
			Отбор.Вставить("Номер", Строка1.Номер);
			Отбор.Вставить("Дата", Строка1.Дата);
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Отбор, Строка1);
		Найдено = Таблица2.НайтиСтроки(Отбор);
		
		Если Найдено.Количество() = 0 Тогда
			Ашипка = "Не удалось в таблице 2 найти документ по номеру %1 от %2";
			Ашипка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Ашипка, Строка1.Номер, Строка1.Дата);
			Ошибки.Добавить(Ашипка);
			Если ВнешняяБаза <> Неопределено Тогда
				текОшибки = Новый Массив;
				текОшибки.Добавить(Ашипка);
				ДобавитьОтметкуОПроверкиВТаблицуНаФорме(Таблица1.Индекс(Строка1), текОшибки);
			КонецЕсли;			
			
			ЕстьОшибки = Истина;
		Иначе
			Строка1.ВнешнийДокумент = Найдено.Получить(0).Ссылка;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЕстьОшибки;
КонецФункции


&НаСервере
Функция ПровестиПоочередно(тзДокументов, тзДокументовВНЕШНЯЯ, Ошибки = Неопределено)
	
	Ошибки = ?(Ошибки = Неопределено, Новый Массив, Ошибки);
	
	ВсегоДокументов = тзДокументов.Количество();
	Для й = 0 По (ВсегоДокументов-1) Цикл
		
		текОшибки = Новый Массив;
		
		Док30 = тзДокументов[й].Ссылка.ПолучитьОбъект();
		
		//Отбор = Новый Структура("Номер,Дата");
		//ЗаполнитьЗначенияСвойств(Отбор, Док30);
		//
		//мНашлиВ20 = тзДокументовВНЕШНЯЯ.НайтиСтроки(Отбор);
		//Если мНашлиВ20.Количество()=0 Тогда Продолжить;		КонецЕсли;
		////До этого были проверки по найденным документам
		//		
		//Док20 = мНашлиВ20[0].Ссылка.ПолучитьОбъект();//тзДокументовВНЕШНЯЯ[й].Ссылка.ПолучитьОбъект();
		
		Док20Ссылка = тзДокументов[й].ВнешнийДокумент;
		Если Док20Ссылка = Неопределено Тогда 
			текОшибки.Добавить("Нет внешнего документа");
			ДобавитьОтметкуОПроверкиВТаблицуНаФорме(й, текОшибки);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Ошибки, текОшибки);
			Продолжить;
		КонецЕсли;
		
		Док30.Записать(РежимЗаписиДокумента.Проведение);
		Док20 = Док20Ссылка.ПОлучитьОбъект();
		Док20.Записать(РежимЗаписиДокумента.Проведение);
				
		ЕстьОшибки = СравнитьДвиженияДвухДокументов(Док30, Док20, текОшибки);
		ДобавитьОтметкуОПроверкиВТаблицуНаФорме(й, текОшибки);
		Если ЕстьОшибки и Объект.ПрерыватьПриПервойОшибке Тогда
			ТекстСообщения = "Ошибка в строке "+(й+1);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.ДокументыДляПроведения["+й+"]");
			Возврат Ложь;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Ошибки, текОшибки);
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

&НаСервереБезКонтекста
Функция СравнитьДвиженияДвухДокументов(Док30, Док20, Ошибки = Неопределено)
	
	Ошибки = ?(Ошибки=Неопределено, Новый Массив, Ошибки);
	
	//Док = Документы.АвансовыйОтчет.НайтиПоНомеру(1).ПолучитьОбъект();
	ВсеДвижения3 = Новый Соответствие;
	Для каждого Движение Из Док30.Движения Цикл				
		ВсеДвижения3.Вставить(Движение.Метаданные().Имя, Движение.Выгрузить());
	КонецЦикла;
	
	ВсеДвижения2 = Новый Соответствие;
	Для каждого Движение Из Док20.Движения Цикл				
		ВсеДвижения2.Вставить(Движение.Метаданные().Имя, Движение.Выгрузить());
	КонецЦикла;
	
	ЕстьОшибки = Ложь;
	
	УжеСравнивались = Новый Массив;
	Для каждого элДв2 Из ВсеДвижения2 Цикл
		ИмяРегистра = элДв2.Ключ;
		Движение2 = элДв2.Значение;
		
		УжеСравнивались.Добавить(ИмяРегистра);
		//есть ли вообще такой в 3.0
		Движение3 = ВсеДвижения3.Получить(ИмяРегистра);
		Если Движение3 = Неопределено Тогда
			Ашипка = "В новой версии не нашли движений документа %1 по регистру %2";
			Ашипка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Ашипка, Док30, ИмяРегистра);
			Ошибки.Добавить(Ашипка);
			Продолжить;			
		КонецЕсли;
		
		ЕстьОшибкиВтекДвижениях = СравнитьТаблицыЗначений(Движение3, Движение2, Ошибки);
		ЕстьОшибки = ЕстьОшибки и ЕстьОшибкиВтекДвижениях;
	КонецЦикла;
	
	//Нет ли движений в 3, которых не было в 2:
	Для каждого элДв3 Из ВсеДвижения3 Цикл
		ИмяРегистра = элДв3.Ключ;
		Если УжеСравнивались.Найти(ИмяРегистра) <> Неопределено Тогда Продолжить;	КонецЕсли;
		
		Ашипка = "В новой версии у документа %1 есть движения по регистру %2, а в старой нет!";
		Ашипка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Ашипка, Док30, ИмяРегистра);
		Ошибки.Добавить(Ашипка);
		
		ЕстьОшибки = Истина;
	КонецЦикла;
	
	Возврат ЕстьОшибки;
КонецФункции


&НаСервере
Процедура ОткатитьВсе(ВнешняяБаза, Ошибки=Неопределено)
	
	Если Ошибки <> Неопределено Тогда
		СообщитьОбОшибках(Ошибки);
	КонецЕсли;
	
	ОтменитьТранзакцию();
	ВнешняяБаза.ОтменитьТранзакцию();
	
	ВнешняяБаза = "";
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СообщитьОбОшибках(МассивОшибок)
	Для каждого Ошибка Из МассивОшибок Цикл
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Ошибка);
	КонецЦикла;
КонецПроцедуры


&НаСервереБезКонтекста
Функция СравнитьТаблицыЗначений(Знач Таблица1, Знач Таблица2, Ошибки = Неопределено, КолонкиСравнения="", КолонкиИсключения="")
	
	мКолонкиИсключения = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КолонкиИсключения,",", Истина, Истина);
	Ошибки = ?(Ошибки=Неопределено, Новый Массив, Ошибки);
	
	ЕстьОшибки = Ложь;
	
	//1. На количество:
	Если Таблица1.Количество() <> Таблица2.Количество() Тогда
		Ашипка = "В первой таблице %1 строк, во второй - %2";
		Ашипка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Ашипка, Таблица1.Количество(), Таблица2.Количество());
		Ошибки.Добавить(Ашипка);
		Возврат Ложь;
	КонецЕсли;
	
	мКолонкиСравнения = Новый Массив;
	Если ПустаяСтрока(КолонкиСравнения) Тогда
		Для каждого Колонка Из Таблица1.Колонки Цикл
			мКолонкиСравнения.Добавить(Колонка.Имя);
		КонецЦикла;
		
		Для каждого Колонка Из Таблица2.Колонки Цикл
			Если мКолонкиСравнения.Найти(Колонка.Имя)=Неопределено Тогда
				Ашипка = "Во второй таблице есть колонка с именем '%1', которой нет в первой";
				Ашипка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Ашипка, Колонка.Имя);
				Ошибки.Добавить(Ашипка);
				
				ЕстьОшибки = Истина;
			КонецЕсли;			
		КонецЦикла;
	Иначе
		мКолонкиСравнения = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КолонкиСравнения, ",", Истина, Истина);
	КонецЕсли;
	
	//Сортируем по всем колонкам сравнения
	ВсеКолонкиСтрокой = СтроковыеФункцииКлиентСервер.СтрокаИзМассиваПодстрок(мКолонкиСравнения, ",");
	Таблица1.Сортировать(ВсеКолонкиСтрокой);
	Таблица2.Сортировать(ВсеКолонкиСтрокой);
	
	//2. Построчно должно быть одинаково	
	ВсегоДокументов = Таблица1.Количество();
	Для й = 0 По (ВсегоДокументов-1) Цикл
		Строка1 = Таблица1[0];
		Строка2 = Таблица2[0];
		
		Для каждого ИмяКолонки Из мКолонкиСравнения Цикл
			Если Строка(Строка1[ИмяКолонки]) <> Строка(Строка2[ИмяКолонки]) Тогда
				Ашипка = "В строке таблицы № %1 не совпадают значения в колонке с именем '%2'. В первой это: %3, во второй: ";
				Ашипка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Ашипка,
								(й+1),
								ИмяКолонки,
								Строка1[ИмяКолонки],
								Строка2[ИмяКолонки]);
								
				Ошибки.Добавить(Ашипка);
				
				ЕстьОшибки = Истина;
			КонецЕсли;
		КонецЦикла;
		//Если (Строка1.Номер <> Строка2.Номер) или (Строка1.Дата <> Строка2.Дата) Тогда
		//	Ашипка = "В строке таблицы № %1 не совпадают номера документов вида %2. В 3.0 это %3, а в 2.0 это %4";
		//	Ашипка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Ашипка,
		//					(й+1),
		//					ТипЗнч(Строка1.Ссылка),
		//					Строка1.Номер,
		//					Строка2.Номер);
		//	Ошибки.Добавить(Ашипка);				
		//КонецЕсли;
	КонецЦикла;
	
	Возврат ЕстьОшибки;
КонецФункции


&НаСервере
Процедура ОтменитьПроведенияДокументов(тзДокументов)	
		
	Для каждого СтрокаТЗ Из тзДокументов Цикл
		обДокумент = СтрокаТЗ.Ссылка.ПолучитьОбъект();
		обДокумент.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	КонецЦикла;
	
КонецПроцедуры


&НаСервере
Функция ТаблицаДокументовДляСравнения(ВнешняяБаза = Неопределено)
			
	ТекстЗапроса = ТекстЗапросаДокументов(ВнешняяБаза);
	Если ВнешняяБаза = Неопределено Тогда
		Запрос = Новый Запрос;
	Иначе
		Запрос = ВнешняяБаза.NewObject("Запрос");
	КонецЕсли;	
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("НачалоПериода", Объект.НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода", КонецДня(Объект.ОкончаниеПериода));
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

&НаСервере
Функция ТекстЗапросаДокументов(ВнешняяБаза = Неопределено)
	
	Синонимы = СоответствияИменДокументов();
	
	ШаблонЗапроса = 
		"ВЫБРАТЬ
		|	Док.Ссылка,
		|	Док.Дата,
		|	Док.Номер,
		|	Док.МоментВремени
		|ИЗ
		|	Документ.%1 КАК Док
		|ГДЕ
		|	Док.Проведен
		|	И Док.Дата МЕЖДУ &НачалоПериода И &ОкончаниеПериода";
	ТекстЗапроса = "";
	
	Для каждого элСписка Из Объект.ВидыДокументов Цикл
		Если не элСписка.Пометка Тогда Продолжить;		КонецЕсли;
		
		текВидДок = элСписка.Значение;
		Если ВнешняяБаза <> Неопределено Тогда
			ВнешнийТекВидДок = Синонимы.Получить(текВидДок);
			Если ВнешнийТекВидДок <> Неопределено Тогда
				текВидДок = ВнешнийТекВидДок;
			КонецЕсли;
		КонецЕсли;
		
		
		текЗапрос = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонЗапроса, текВидДок);
		
		ТекстЗапроса = ТекстЗапроса + ?(ПустаяСтрока(ТекстЗапроса), "", "
			|ОБЪЕДИНИТЬ ВСЕ 
			|")
			+ текЗапрос;
	КонецЦикла;
		
	ТекстЗапроса = 
		"ВЫБРАТЬ 
		|	ВсеДокументы.Ссылка,
		|	ВсеДокументы.Дата,
		|	ВсеДокументы.Номер
		|ИЗ ("+ТекстЗапроса+") как ВсеДокументы
		|Упорядочить по ВсеДокументы.МоментВремени";
	Возврат ТекстЗапроса;
КонецФункции

&НаСервере
Функция СоответствияИменДокументов()
	Синонимы = Новый Соответствие;
	тдСинонимы = РеквизитФормыВЗначение("Объект").ПолучитьМакет("Синонимы");
	Для НомерСтроки = 2 По 100 Цикл		
		Область30 = тдСинонимы.Область(НомерСтроки, 1, НомерСтроки, 1);
		Область20 = тдСинонимы.Область(НомерСтроки, 2, НомерСтроки, 2);
		Если ПустаяСтрока(Область30.Текст) Тогда
			Возврат Синонимы;
		КонецЕсли;
		
		Синонимы.Вставить(СокрЛП(Область30.Текст), СокрЛП(Область20.Текст));
	КонецЦикла;
	
	Возврат Синонимы;
КонецФункции



&НаКлиенте
Процедура Тест(Команда)

КонецПроцедуры


&НаКлиенте
Процедура ОтметитьСуществующиеВПериоде(Команда)
	ОтметитьСуществующиеВПериодеНаСервере();
КонецПроцедуры


&НаСервере
Процедура ОтметитьСуществующиеВПериодеНаСервере()
	
	ВидыДляПометки = Новый Массив;	
	
	Для каждого МетаДокумент Из Метаданные.Документы Цикл
		ВидДок = МетаДокумент.Имя;
		Выборка = Документы[ВидДок].Выбрать(Объект.НачалоПериода, КонецДня(Объект.ОкончаниеПериода));
		Если Выборка.Следующий() Тогда
			ВидыДляПометки.Добавить(ВидДок);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого элСписка Из Объект.ВидыДокументов Цикл		
		элСписка.Пометка = (ВидыДляПометки.Найти(элСписка.Значение) <> Неопределено);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ДобавитьОтметкуОПроверкиВТаблицуНаФорме(НомерСтрокиТЗ, Ошибки)
	Исправен = Ложь;
	Если Ошибки = Неопределено Тогда 
		Исправен = Истина;
	КонецЕсли;
	Если Ошибки.Количество()=0 Тогда
		Исправен = Истина;
	КонецЕсли;
	
	текСтрокаНаФорме = Объект.ДокументыДляПроведения[НомерСтрокиТЗ];
	текСтрокаНаФорме.Исправен = Исправен;
	текСтрокаНаФорме.Проверен = Истина;
	
	Если не Исправен Тогда
		текСтрокаНаФорме.Ошибка = СтроковыеФункцииКлиентСервер.СтрокаИзМассиваПодстрок(Ошибки, Символы.ПС);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДвиженияВТекст(Команда)
	ВыгрузитьДвиженияВТекстНаСервере();
КонецПроцедуры

&НаСервере
Функция ВыгрузитьДвиженияВТекстНаСервере()	
	
	_ЭтаОбработка = РеквизитФормыВЗначение("Объект");	
	ТекстДСОН = _ЭтаОбработка.ДвиженияДокументовВJSON();
	ЗначениеВРеквизитФормы(_ЭтаОбработка, "Объект");
	
	Возврат ТекстДСОН;
КонецФункции





