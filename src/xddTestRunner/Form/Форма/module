////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мМассивПиктограммСостояний;
Перем мМассивПиктограммТиповСтроки;

Перем мЭтоВнутренняяОбработка;
Перем мСохраненныйПутьОтдельногоТестовогоНабора;
Перем мАвтозапускТестовыхНаборов;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Открывает диалог выбора каталога тестов.
// Возвращает Истину, если каталог выбран и ложь в противном случае.
// Путь к выбранному каталогу запоминается в реквизите формы Путь.
// 
Функция ВыбратьКаталогТестов()
	
	ДиалогВыбораКаталога = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораКаталога.Каталог = Путь;
	
	Если ДиалогВыбораКаталога.Выбрать() Тогда
		
		Путь = ДиалогВыбораКаталога.Каталог;
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Открывает диалог выбора подсистем тестов
//
Функция ВыбратьПодсистему(ОтборПоИмениТеста)
	ФормаВыбораПодсистем = ЭтотОбъект.ПолучитьФорму("ФормаВыбораПодсистемы");
	ФормаВыбораПодсистем.РежимВыбора = Истина;
	ФормаВыбораПодсистем.ОбработкаОбъект = ЭтотОбъект;
	ФормаВыбораПодсистем.ОтборПоИмениТеста = ОтборПоИмениТеста;
	РезультатВыбораПодсистемы = ФормаВыбораПодсистем.ОткрытьМодально();
	
	Если РезультатВыбораПодсистемы <> Неопределено Тогда
		Путь = РезультатВыбораПодсистемы;
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

// Разворачивает строки табличного поля дерева тестов.
// По умолчанию разворачивается только самый верхний уровень.
// 
Процедура РазвернутьСтрокиДерева(ВключаяПодчиненные = Ложь)
	
	Для каждого СтрокаДерева из ДеревоТестов.Строки Цикл
		ЭлементыФормы.тпДеревоТестов.Развернуть(СтрокаДерева, ВключаяПодчиненные);
	КонецЦикла;	
	
КонецПроцедуры

Процедура СвернутьУспешныеСтрокиДереваИРазвернутьНеуспешные(СтрокиДереваТестов, ОставитьРазвернутым)
	ЭлементДеревоТестов = ЭлементыФормы.тпДеревоТестов;
	Для каждого СтрокаДерева из СтрокиДереваТестов Цикл
		Если Не ОставитьРазвернутым Тогда
			Если СтрокаДерева.Состояние = мЗначенияСостоянияТестов.Сломался или 
				СтрокаДерева.Состояние = мЗначенияСостоянияТестов.НеРеализован Тогда
				
					ЭлементДеревоТестов.Развернуть(СтрокаДерева, Ложь);
			Иначе
					ЭлементДеревоТестов.Свернуть(СтрокаДерева);			
			КонецЕсли;
		КонецЕсли;
		СвернутьУспешныеСтрокиДереваИРазвернутьНеуспешные(СтрокаДерева.Строки, Ложь);
	КонецЦикла;	
	
КонецПроцедуры

Функция ПосчитатьКоличествоТестовыхСлучаевПоВсемуДеревуТестов(РодительскаяСтрока)
	коллекцияСтрок = РодительскаяСтрока.Строки;
	Если коллекцияСтрок.Количество() = 0 Тогда
		Возврат 1; // строка теста
	КонецЕсли;
	количествоТестов = 0;
	Для каждого СтрокаДерева из коллекцияСтрок Цикл
		лКоличество = ПосчитатьКоличествоТестовыхСлучаевПоВсемуДеревуТестов(СтрокаДерева);
		СтрокаДерева.КоличествоТестов = лКоличество;
        количествоТестов = количествоТестов + лКоличество;
	КонецЦикла;
	Возврат количествоТестов;
КонецФункции

// Устанавливает начальное состояние индикатора выполнения тестов.
// 
Процедура ИнициализироватьИндикаторВыполнения(КоличествоТестовыхСлучаев = 0)
	
	ЭлементыФормы.ИндикаторВыполнения.МаксимальноеЗначение = КоличествоТестовыхСлучаев;
	ЭлементыФормы.ИндикаторВыполнения.Значение = 1;
	ЭлементыФормы.ИндикаторВыполнения.ЦветРамки = Новый Цвет(0, 174, 0); // Зеленый.
	
КонецПроцедуры

// Рекурсивно из строк дерева тестов запоминает в соответствии в качестве ключа
// только те строки дерева тестов, которые являются тестовыми случаями.
// Возвращает созданное и заполненное тестовыми случаями соответствие.
// 
Функция ПолучитьТолькоТестовыеСлучаи(СтрокиДереваТестов, КэшТестовыхСлучаев=Неопределено, Инкримент = 0)
	
	Если КэшТестовыхСлучаев=Неопределено Тогда
		КэшТестовыхСлучаев = Новый Соответствие;
	КонецЕсли;
	
	Для каждого СтрокаДереваТестов из СтрокиДереваТестов Цикл
		Инкримент = Инкримент+1;
		Если СтрокаДереваТестов.ТипСтроки = мЗначенияТиповСтроки.ТестовыйМетод Тогда
			КэшТестовыхСлучаев.Вставить(Инкримент, СтрокаДереваТестов);
		Иначе
			ПолучитьТолькоТестовыеСлучаи(СтрокаДереваТестов.Строки, КэшТестовыхСлучаев, Инкримент);
		КонецЕсли;
	КонецЦикла;
	
	Возврат КэшТестовыхСлучаев;
	
КонецФункции

Процедура ЗагрузитьТестыПоРанееСохраненнымПараметрам()
	лПараметры = ВосстановитьЗначение(ПолучитьИмяДляСохраненияПараметров());
	Если ЗначениеЗаполнено(лПараметры) Тогда
		Путь = лПараметры.Путь;

		мСохраненныйПутьОтдельногоТестовогоНабора = лПараметры.мСохраненныйПутьОтдельногоТестовогоНабора;
		Если лПараметры.Свойство("ЭтоВнутренняяОбработка") Тогда
			мЭтоВнутренняяОбработка = лПараметры.ЭтоВнутренняяОбработка;
		Иначе
			мЭтоВнутренняяОбработка = Ложь;
		КонецЕсли;
		
		ЗагрузитьТестыВЗависимостиОтВидаТестов();
	КонецЕсли; 
КонецПроцедуры

Процедура ЗагрузитьТестыВЗависимостиОтВидаТестов()
	Если мЭтоВнутренняяОбработка Тогда
		
		Форма_ЗагрузитьОбработкиКонфигурации();
		
	ИначеЕсли ЗначениеЗаполнено(мСохраненныйПутьОтдельногоТестовогоНабора) Тогда
		
		Форма_ЗагрузитьОтдельныйТестовыйНабор(мСохраненныйПутьОтдельногоТестовогоНабора);
		
	ИначеЕсли ЗначениеЗаполнено(Путь) Тогда
		
		Форма_ЗагрузитьТестовыеНаборы();
		
	КонецЕсли; 
КонецПроцедуры

Функция ПолучитьИмяДляСохраненияПараметров()
	Возврат Метаданные().Имя + "_Параметры";
КонецФункции

// Пример строки запуска для внешних файлов - "Тесты_Команда_Тестировать;E:\ТестыИМ\Тесты;ЗавершитьРаботуПослеТестирования"
//	"C:\Program Files (x86)\1cv82\8.2.18.96\bin\1cv8c.exe" /DisableStartupMessages /Execute E:\ТестыИМ\xddTestRunner.epf /S "as-msk-a6122\im_test" /Out "E:\ТестыИМ\Тесты\log.txt"  /C "Тесты_Команда_Тестировать;E:\ТестыИМ\Тесты;ЗавершитьРаботуПослеТестирования" /LogUI
//
// Пример строки запуска для внутренний тестов-обработок - "ЭтоТестИзКонфигурации;Тесты_Команда_Тестировать;Подсистемы.Тестирование;ЗавершитьРаботуПослеТестирования"
//	"C:\Program Files (x86)\1cv82\8.2.18.96\bin\1cv8c.exe" /DisableStartupMessages /Execute E:\ТестыИМ\xddTestRunner.epf /S "as-msk-a6122\im_test" /Out "E:\ТестыИМ\Тесты\log.txt"  /C "Тесты_Команда_Тестировать;E:\ТестыИМ\Тесты;ЗавершитьРаботуПослеТестирования" /LogUI
Функция ОбработатьПараметрыЗапуска(СтрокаПараметровЗапуска)
	
	ПараметрыЗапуска = РазобратьПараметрыЗапуска(СтрокаПараметровЗапуска);
	Если ПараметрыЗапуска = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	естьКоманда_ВыполнитьТестирование = ПараметрыЗапуска.Выполнить;
	естьКоманда_Загрузить = ПараметрыЗапуска.Загрузить;
	путьКТестам = ПараметрыЗапуска.ПутьТестов;
	лЗавершитьРаботуПослеТестирования = ПараметрыЗапуска.ОстановитьСистему;
	
	ПутьОтчетаТестирования = ПараметрыЗапуска.ПутьОтчета;
	ТипОтчетаОТестировании = ПараметрыЗапуска.ФорматОтчета;
	ПутьКФайлуЛога = ПараметрыЗапуска.ПутьКодаВозврата;
	РегистрацияПрохожденияТестовВЖР = ПараметрыЗапуска.РегистрацияПрохожденияТестовВЖР;
	мЭтоВнутренняяОбработка = ПараметрыЗапуска.ВстроенныеТесты;
	ВыводЛогаВФорматеTeamCity = ПараметрыЗапуска.ВыводЛогаВФорматеTeamCity;
	
	ЭтаФорма.ЗавершитьРаботуПослеТестирования = лЗавершитьРаботуПослеТестирования;
	
	ЗаписатьКодВозвратаВЛогФайл(ПутьКФайлуЛога, "1"); //По умолчанию считаем что ошибка. Перед завершением работы запишем 0. 
	
	Если НЕ ПустаяСтрока(путьКТестам) Тогда
		Путь = путьКТестам;
		Попытка
			ЗагрузитьТестыВЗависимостиОтВидаТестов();
		Исключение
			текстОшибки = ОписаниеОшибки();
			ВывестиСообщение("ОШИБКА загрузки тестов: "+текстОшибки);
			Если лЗавершитьРаботуПослеТестирования Тогда
				ЗавершитьРаботуСистемы(Ложь);
				Возврат Истина;
			КонецЕсли;
		КонецПопытки;
	КонецЕсли;
	
	Если естьКоманда_ВыполнитьТестирование Тогда
		Попытка
			ВыполнитьВсеТесты();
		Исключение
			текстОшибки = ОписаниеОшибки();
			ВывестиСообщение("ОШИБКА выполнения тестов: "+текстОшибки);
			Если лЗавершитьРаботуПослеТестирования Тогда
				ЗавершитьРаботуСистемы(Ложь);
				Возврат Истина;
			КонецЕсли;
		КонецПопытки;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

Процедура УстановитьПоУмолчаниюОбработчикКоманды_ЗагрузитьТесты()
	НужнаяКнопка = ЭлементыФормы.КнопкаЗагрузитьТесты;
	Кнопки = НужнаяКнопка.Кнопки;
	Если ЭтоВнешняяОбработка() Тогда
		Кнопка = Кнопки.ЗагрузитьВсеТесты;
	Иначе
		Кнопка = Кнопки.ЗагрузитьТестыИзКонфигурации_ИмяТеста;
	КонецЕсли; 		
	
	НужнаяКнопка.УстановитьДействие("Нажатие", Кнопка.Действие);
	Кнопка.Картинка = НужнаяКнопка.Картинка;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	ПодключитьИнформатор();
КонецПроцедуры

Процедура ПриОткрытии()
	ЭтаФорма.Заголовок = ЭтотОбъект.ЗаголовокФормы();
	УстановитьПоУмолчаниюОбработчикКоманды_ЗагрузитьТесты();
	
	Если Не ОбработатьПараметрыЗапуска(ПараметрЗапуска) Тогда
		ЗагрузитьТестыПоРанееСохраненнымПараметрам();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗакрытии()
	лПараметры = Новый Структура("Путь, мСохраненныйПутьОтдельногоТестовогоНабора, ЭтоВнутренняяОбработка", Путь, мСохраненныйПутьОтдельногоТестовогоНабора, мЭтоВнутренняяОбработка);
	СохранитьЗначение(ПолучитьИмяДляСохраненияПараметров(), лПараметры);
КонецПроцедуры

// Обработка оповещений о загрузке или ходе выполнения тестов.
// 
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Возможные события:
	// 		xUnitFor1C.TestLoaded
	// 		xUnitFor1C.TestPassed
	// 		xUnitFor1C.TestNotInplemented
	// 		xUnitFor1C.TestFailed
	
	Если ИмяСобытия = "xUnitFor1C.TestPassed" Тогда
		
		ЭлементыФормы.ИндикаторВыполнения.Значение = ЭлементыФормы.ИндикаторВыполнения.Значение + 1;
		
	ИначеЕсли ИмяСобытия = "xUnitFor1C.TestNotImplemented" Тогда
		
		ЭлементыФормы.ИндикаторВыполнения.Значение = ЭлементыФормы.ИндикаторВыполнения.Значение + 1;
		
		Если ЭлементыФормы.ИндикаторВыполнения.ЦветРамки <> WebЦвета.Красный Тогда
			ЭлементыФормы.ИндикаторВыполнения.ЦветРамки = WebЦвета.Золотой;
		КонецЕсли;
				
	ИначеЕсли ИмяСобытия = "xUnitFor1C.TestFailed" Тогда
		
		ЭлементыФормы.ИндикаторВыполнения.Значение = ЭлементыФормы.ИндикаторВыполнения.Значение + 1;
		ЭлементыФормы.ИндикаторВыполнения.ЦветРамки = WebЦвета.Красный;
		
	КонецЕсли;	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ СТРАНИЦЫ "Тестирование"

Процедура ВыполнитьВыделенныеТесты(Элемент, ВызыватьИсключение = Ложь)
	// В случае множественного выделения в общем случае у нас могут быть одновременно выделены 
	// как строки на уровне обработок тестирования и папок, но и отдельные тестовые случаи.
	// Поэтому мы предварительно из выделенных строк получаем ТОЛЬКО строки, соответствующие 
	// тестовым случаям. При этом, если выделена строка обработки или папка, то значит надо выполнить
	// все тестовые случае, реализованные в этой обработке (или все тестовые случаи, реализованные во
	// всех обработках в выделенной папке). 
	 
	КэшТестовыхСлучаев = ПолучитьТолькоТестовыеСлучаи(ЭлементыФормы.тпДеревоТестов.ВыделенныеСтроки);	
	
	ИнициализироватьИндикаторВыполнения(КэшТестовыхСлучаев.Количество());
	
	ПередВыполнениемТестов();
	
	датаНачалаТестирования = ТекущаяДата();
	
	ОчиститьСообщения();
	Для каждого ЭлементКэша  из КэшТестовыхСлучаев Цикл
		#Если Клиент Тогда
		ОбработкаПрерыванияПользователя();
		#КонецЕсли 
		
		СтрокаТестовогоСлучая = ЭлементКэша.Значение; //ЭлементКэша.Ключ;	
		СтрокаТестовогоСлучая.ВызыватьИсключение = ВызыватьИсключение;
		СтрокаТестовогоСлучая.Состояние = ВыполнитьТест(СтрокаТестовогоСлучая, мСписокОшибок);
		
		ИзменитьСостояниеВыполненияРодителей(СтрокаТестовогоСлучая);
		
	КонецЦикла;
	СвернутьУспешныеСтрокиДереваИРазвернутьНеуспешные(ДеревоТестов.Строки, Истина);
	
	Если ПустаяСтрока(ТипОтчетаОТестировании) Тогда
		ТипОтчетаОТестировании = "mxl";
	КонецЕсли;
	
	табДок = ПолучитьОтчетТестирования(датаНачалаТестирования, ТипОтчетаОТестировании);
	
	имяФайлаТестирования = "лог_тестирования";
	файлФайлаТестирования = Новый Файл(ПутьОтчетаТестирования);
	Если файлФайлаТестирования.Существует() И НЕ файлФайлаТестирования.ЭтоКаталог() Тогда 
		имяФайлаТестирования = файлФайлаТестирования.ИмяБезРасширения;
		ПутьОтчетаТестирования = файлФайлаТестирования.Путь;
	ИначеЕсли НЕ файлФайлаТестирования.Существует() И НЕ ПустаяСтрока(файлФайлаТестирования.Расширение) Тогда 
		имяФайлаТестирования = файлФайлаТестирования.ИмяБезРасширения;
		ПутьОтчетаТестирования = файлФайлаТестирования.Путь;
	КонецЕсли;
	
	Если табДок <> Неопределено Тогда
		
		Если НЕ ПустаяСтрока(ПутьОтчетаТестирования) Тогда
			ЗаписатьФайлОтчетТестирования(табДок, имяФайлаТестирования);
		КонецЕсли;
		
		табДок.Показать("Отчет об автоматическом тестировании, xUnitFor1C v." + Версия());
	Иначе // все тесты прошли
		Если НЕ ПустаяСтрока(ПутьОтчетаТестирования) Тогда
			УдалитьФайлыОтчетовТестирования(имяФайлаТестирования);
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

Процедура КнопкаВыполнитьВыделенныйНажатие(Элемент)
	
	ВыполнитьВыделенныеТесты(Элемент);
	
КонецПроцедуры

Процедура КоманднаяПанельКонтекстноеМенюПоляТестовВыполнитьТестСИсключением(Элемент)
	
	ВыполнитьВыделенныеТесты(Элемент, Истина);
	
КонецПроцедуры



Процедура КнопкаВыполнитьВсеТестыНажатие(Элемент)
	
	ВыполнитьВсеТесты();
		
КонецПроцедуры

Процедура ВыполнитьВсеТесты()
	
	ИнициализироватьИндикаторВыполнения(мКоличествоТестовыхСлучаев);
	
	датаНачалаТестирования = ТекущаяДата();
	
	ОчиститьСообщения();
	КодРезультатаТестирования = ВыполнитьТесты(ДеревоТестов.Строки);
	
	СвернутьУспешныеСтрокиДереваИРазвернутьНеуспешные(ДеревоТестов.Строки, Истина);
	
	Если ПустаяСтрока(ТипОтчетаОТестировании) Тогда
		ТипОтчетаОТестировании = "mxl";
	КонецЕсли;
	
	табДок = ПолучитьОтчетТестирования(датаНачалаТестирования, ТипОтчетаОТестировании);
	
	имяФайлаТестирования = "лог_тестирования";
	
	файлФайлаТестирования = Новый Файл(ПутьОтчетаТестирования);
	Если файлФайлаТестирования.Существует() И НЕ файлФайлаТестирования.ЭтоКаталог() Тогда 
		имяФайлаТестирования = файлФайлаТестирования.ИмяБезРасширения;
		ПутьОтчетаТестирования = файлФайлаТестирования.Путь;
	ИначеЕсли НЕ файлФайлаТестирования.Существует() И НЕ ПустаяСтрока(файлФайлаТестирования.Расширение) Тогда 
		имяФайлаТестирования = файлФайлаТестирования.ИмяБезРасширения;
		ПутьОтчетаТестирования = файлФайлаТестирования.Путь;
	КонецЕсли;
	
	//Дополнить слэш при необходимости. 
	ПутьОтчетаТестирования = ДополнитьСлешВПуть(ПутьОтчетаТестирования);
	
	Если табДок <> Неопределено Тогда
		
		Если НЕ ПустаяСтрока(ПутьОтчетаТестирования) Тогда
			ЗаписатьФайлОтчетТестирования(табДок, имяФайлаТестирования);
		КонецЕсли;
		
		табДок.Показать("Отчет об автоматическом тестировании, xUnitFor1C v." + Версия());
	Иначе // все тесты прошли
		Если НЕ ПустаяСтрока(ПутьОтчетаТестирования) Тогда
			УдалитьФайлыОтчетовТестирования(имяФайлаТестирования);
		КонецЕсли;
	КонецЕсли;
	
	
	Если ЭтаФорма.ЗавершитьРаботуПослеТестирования Тогда
		
		ЗаписатьКодВозвратаВЛогФайл(ПутьКФайлуЛога, "0", КодРезультатаТестирования);
		
		ЗавершитьРаботуСистемы(Ложь);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписатьФайлОтчетТестирования(табДок, имяФайлаТестирования)
	Если ТипОтчетаОТестировании = "xml" Тогда
		ЗаписьXML = Новый ЗаписьXML;
		Попытка
			ЗаписьXML.ОткрытьФайл(ПутьОтчетаТестирования + имяФайлаТестирования + "."+ТипОтчетаОТестировании);
			ЗаписьXML.ЗаписатьОбъявлениеXML();
			ЗаписьXML.ЗаписатьБезОбработки(табДок.ПолучитьТекст());
			ЗаписьXML.Закрыть();
		Исключение
		КонецПопытки;
	Иначе
		
		Попытка
			табДок.Записать(ПутьОтчетаТестирования + имяФайлаТестирования + "."+ТипОтчетаОТестировании, ТипФайлаТабличногоДокумента[ТипОтчетаОТестировании]);
		Исключение
		КонецПопытки;
		
	КонецЕсли;
КонецПроцедуры

Процедура УдалитьФайлыОтчетовТестирования(имяФайлаТестирования)

	Попытка
		УдалитьФайлы(ПутьОтчетаТестирования + "\" + имяФайлаТестирования + ".xlsx");
	Исключение
	КонецПопытки;

	Попытка
		УдалитьФайлы(ПутьОтчетаТестирования + "\" + имяФайлаТестирования + ".mxl");
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура КнопкаЗагрузитьТестыИзКонфигурации(Кнопка)
	ЗагрузитьТестыИзКонфигурации("");
КонецПроцедуры

Процедура КнопкаЗагрузитьТестыИзКонфигурации_ИмяТеста(Кнопка)
	ЗагрузитьТестыИзКонфигурации("Тест_");
КонецПроцедуры

Процедура ЗагрузитьТестыИзКонфигурации(ОтборПоИмениТеста)
	
	Если ВыбратьПодсистему(ОтборПоИмениТеста) Тогда
		мЭтоВнутренняяОбработка = Истина;
	
		Форма_ЗагрузитьОбработкиКонфигурации();
	КонецЕсли;

КонецПроцедуры

Процедура КнопкаЗагрузитьТестыНажатие(Элемент)
	
	Если ВыбратьКаталогТестов() Тогда
		мСохраненныйПутьОтдельногоТестовогоНабора = "";
		мЭтоВнутренняяОбработка = Ложь;
		
		Форма_ЗагрузитьТестовыеНаборы();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КнопкаЗагрузитьТестыЗагрузитьТестКейс(Кнопка)
		
	ДиалогВыбораТеста = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораТеста.Фильтр = "Обработка-тест (*.epf)|*.epf|Все файлы|*";
	ДиалогВыбораТеста.МножественныйВыбор = Ложь;
	ДиалогВыбораТеста.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораТеста.Каталог = Путь;
	
	Если ДиалогВыбораТеста.Выбрать() Тогда
		
		Путь = ДиалогВыбораТеста.Каталог;
		Форма_ЗагрузитьОтдельныйТестовыйНабор(ДиалогВыбораТеста.ПолноеИмяФайла);
		
	КонецЕсли;
			
КонецПроцедуры

Процедура КнопкаПерезагрузитьНажатие(Элемент)
	
	ЗагрузитьТестыВЗависимостиОтВидаТестов();

КонецПроцедуры

Процедура Форма_ЗагрузитьОтдельныйТестовыйНабор(путьКТестовомуНабору)
	ИнициализироватьИндикаторВыполнения();
	
	мСохраненныйПутьОтдельногоТестовогоНабора = путьКТестовомуНабору;
	мЭтоВнутренняяОбработка = Ложь;
	
	ЗагрузитьВсеТесты(мСохраненныйПутьОтдельногоТестовогоНабора);
	
	ПосчитатьКоличествоТестовыхСлучаевПоВсемуДеревуТестов(ДеревоТестов);
	РазвернутьСтрокиДерева(Истина);
КонецПроцедуры

Процедура Форма_ЗагрузитьТестовыеНаборы()
	ИнициализироватьИндикаторВыполнения();
	
	ЗагрузитьВсеТесты(Путь);	

	ПосчитатьКоличествоТестовыхСлучаевПоВсемуДеревуТестов(ДеревоТестов);
	РазвернутьСтрокиДерева();
КонецПроцедуры

Процедура Форма_ЗагрузитьОбработкиКонфигурации()
	ИнициализироватьИндикаторВыполнения();
	
	ДеревоТестов.Строки.Очистить();
	
	ЗагрузитьТестыКонфигурации(Путь);
	
	ПосчитатьКоличествоТестовыхСлучаевПоВсемуДеревуТестов(ДеревоТестов);
	РазвернутьСтрокиДерева(мКоличествоТестовыхСлучаев < 30);
КонецПроцедуры

// Процедура для кнопки "Переоткрыть"
// Закрывает и вновь открывает текущую форму.
// 
Процедура КнопкаПерезагрузитьПерезагрузитьБраузерТестирования(Кнопка)
	
	Для каждого МетаФорма Из ЭтаФорма.Метаданные().Формы Цикл
		ТекФорма = ПолучитьФорму(МетаФорма); // может возвращать неопределено, если есть управляемая форма
		Если ТекФорма <> Неопределено И ТекФорма.Открыта() Тогда
			ТекФорма.Закрыть();
			Если ТекФорма = ЭтаФорма Тогда
				Если Не ЭтоВнешняяОбработка() Тогда
					Обработки.xddTestRunner.Создать().ПолучитьФорму(МетаФорма.Имя).Открыть();
				Иначе
					НайденноеИмяФайла = Неопределено;
					Выполнить("НайденноеИмяФайла = ЭтотОбъект.ИспользуемоеИмяФайла;");
					ВнешниеОбработки.Создать(НайденноеИмяФайла).ПолучитьФорму(МетаФорма.Имя).Открыть();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ ДеревоТестов

Процедура тпДеревоТестовПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОформлениеСтроки.Ячейки.ПиктограммаСостояния.УстановитьКартинку(мМассивПиктограммСостояний[ДанныеСтроки.Состояние]);		
	ОформлениеСтроки.Ячейки.Имя.УстановитьКартинку(мМассивПиктограммТиповСтроки[ДанныеСтроки.ТипСтроки]);		
	ОформлениеСтроки.Ячейки.ПолныйПуть.УстановитьТекст(СтрЗаменить(ДанныеСтроки.ПолныйПуть, Путь, "..."));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура КнопкаЗагрузитьТестыИнформацияОПроекте(Кнопка)
	ЗапуститьПриложение("https://github.com/xDrivenDevelopment/xUnitFor1C/wiki");
КонецПроцедуры

Процедура КнопкаИнструментыГенераторМакетовДанных(Кнопка)
	ИмяИнструмента = "xddDataFixtureGen.epf";
	ОткрытьИнструмент(ИмяИнструмента, "Форма");
КонецПроцедуры

Процедура КнопкаИнструментыПоказатьГУИД(Кнопка)
	ИмяИнструмента = "xddGuidShow.epf";
	ОткрытьИнструмент(ИмяИнструмента, "Форма");
КонецПроцедуры

Процедура ОткрытьИнструмент(ИмяИнструмента, ИмяФормы)
	ПутьВнешнихИнструментов = ПолныйПутьКаталогаОбработки();
	Если НЕ ПустаяСтрока(ПутьВнешнихИнструментов)  Тогда
		ПутьИнструмента = ПутьВнешнихИнструментов + ИмяИнструмента;
		Файл = Новый Файл(ПутьИнструмента);
		Если Не Файл.Существует() Тогда
			Сообщить("Инструмент <"+ИмяИнструмента+"> не найден в каталоге <"+ПутьИнструмента+">");
			Возврат;
		КонецЕсли;
		Обработка = СоздатьОбъектВнешнейОбработкиОтключаяБезопасныйРежим(ПутьИнструмента);
		НоваяФорма = Обработка.ПолучитьФорму(ИмяФормы);
		Если НоваяФорма = Неопределено Тогда
			Сообщить("Инструмент <"+ИмяИнструмента+">: не удалось получить основную форму!");
			Возврат;
		КонецЕсли;
		НоваяФорма.Открыть();
		НоваяФорма = Неопределено;
	КонецЕсли;
КонецПроцедуры

Функция ПолныйПутьКаталогаОбработки() Экспорт
	Рез = "";
	Если ЭтоВнешняяОбработка() Тогда
		НайденноеИмяФайла = Неопределено;
		Выполнить("НайденноеИмяФайла = ЭтотОбъект.ИспользуемоеИмяФайла;");
		файл = Новый Файл(НайденноеИмяФайла);
		Рез = файл.Путь;
	КонецЕсли;
	Возврат Рез;
КонецФункции

Процедура тпДеревоТестовПриАктивизацииСтроки(Элемент)
	Если ЭлементыФормы.тпДеревоТестов.ВыделенныеСтроки.Количество() <= 1 Тогда
		ТекcтКоманды = "Выполнить тест";
	Иначе
		ТекcтКоманды = "Выполнить выбранные тесты";
	КонецЕсли;
	ЭлементыФормы.КоманднаяПанельКонтекстноеМенюПоляТестов.Кнопки.ВыполнитьТест.Текст = ТекcтКоманды;
КонецПроцедуры

Процедура КнопкаРегистрацияПрохожденияТестовВЖР(Кнопка)
	РегистрацияПрохожденияТестовВЖР = ?(РегистрацияПрохожденияТестовВЖР, Ложь, Истина);
	ЭлементыФормы.КнопкаЗагрузитьТесты.Кнопки.РегистрацияПрохожденияТестовВЖР.Пометка = РегистрацияПрохожденияТестовВЖР;
КонецПроцедуры

Процедура КнопкаРегистрацияОшибокТестовВЖР(Кнопка)
	РегистрацияОшибокТестовВЖР = ?(РегистрацияОшибокТестовВЖР, Ложь, Истина);
	ЭлементыФормы.КнопкаЗагрузитьТесты.Кнопки.РегистрацияОшибокТестовВЖР.Пометка = РегистрацияОшибокТестовВЖР;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

// Функция ДополнитьСлешВПуть
//
// Параметры:
// ИмяКаталога
//
// Описание:
// Функция дополняет и возвращает слеш в путь в конец строки, если он отсутствует
//
Функция ДополнитьСлешВПуть(Знач Каталог)
	разделитель = "\";

	СисИнфо = Новый СистемнаяИнформация;
	Если Найти(Строка(СисИнфо.ТипПлатформы), "Linux")>0 Тогда 
		разделитель = "/";
	КонецЕсли;
		
	Если Прав(Каталог, 1) <> разделитель Тогда
		Каталог = Каталог + разделитель;
	КонецЕсли;
	Возврат Каталог;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

//{ Состояния тестов
мМассивПиктограммСостояний = Новый Массив(4);
мМассивПиктограммСостояний[мЗначенияСостоянияТестов.НеВыполнялся]	= ЭлементыФормы.ПолеКартинкиСерый.Картинка; 
мМассивПиктограммСостояний[мЗначенияСостоянияТестов.Сломался]		= ЭлементыФормы.ПолеКартинкиКрасный.Картинка;
мМассивПиктограммСостояний[мЗначенияСостоянияТестов.НеРеализован]	= ЭлементыФормы.ПолеКартинкиЖелтый.Картинка;
мМассивПиктограммСостояний[мЗначенияСостоянияТестов.Прошел]			= ЭлементыФормы.ПолеКартинкиЗеленый.Картинка;
мМассивПиктограммСостояний = Новый ФиксированныйМассив(мМассивПиктограммСостояний);
//} Состояния тестов

//{ Типы строк дерева тестов
мМассивПиктограммТиповСтроки = Новый Массив(4);
мМассивПиктограммТиповСтроки[мЗначенияТиповСтроки.КаталогТестов]	= ЭлементыФормы.ПолеКартинкиКаталогТестов.Картинка;
мМассивПиктограммТиповСтроки[мЗначенияТиповСтроки.ТестовыйСлучай]	= ЭлементыФормы.ПолеКартинкиТест.Картинка;
мМассивПиктограммТиповСтроки[мЗначенияТиповСтроки.ТестовыйМетод] 	= ЭлементыФормы.ПолеКартинкиТестовыйСлучай.Картинка;
мМассивПиктограммТиповСтроки[мЗначенияТиповСтроки.Подсистема]	 	= ЭлементыФормы.ПолеКартинкиПодсистема.Картинка;
мМассивПиктограммТиповСтроки = Новый ФиксированныйМассив(мМассивПиктограммТиповСтроки);
//} Типы строк дерева тестов

мСохраненныйПутьОтдельногоТестовогоНабора = "";
мЭтоВнутренняяОбработка = Ложь;
мАвтозапускТестовыхНаборов = Ложь;
